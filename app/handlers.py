from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import Message 
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery

from aiogram.fsm.state import State, StatesGroup #–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

import app.keyboard as kb 
import app.database.requests as rq
from app.database.requests import get_all_users

router = Router()

class Register(StatesGroup):
    noteName = State()
    noteText = State()

@router.message(CommandStart())
async def start(message: Message):
    chek = await rq.set_user(
        tg_id = message.from_user.id, 
        name = message.from_user.first_name,
        userId = message.from_user.username,
        data = datetime.now(timezone.utc).replace(microsecond=0)
        ) 
    
    if chek:
        await message.answer("‚ú® ")


    
    await message.answer(f'‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!'
                         '\n\nüî∏–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.'
                         '\nüî∏–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫'
                         '\nüî∏–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏ /help', reply_markup=kb.newnote_menu)
    

    

    
    
@router.message(Command("users"))
async def cmd_users(message: Message):
    user_id = message.from_user.id
    chekadmin = await rq.chekAdmin(tg_id = user_id)
    
    if chekadmin:
    
    
        users = await get_all_users()

        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            name = user.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = f"@{user.userId}" if user.userId else "–Ω–µ—Ç username"
            dataReg = user.data
            text += f"‚Ä¢ {name} | {username} | userID: {user.tg_id} | –í—Ä–µ–º—è —Ä–µ–≥-–∏–∏: {dataReg}\n\n"

        await message.answer(text, parse_mode='html')
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞...")
    

@router.message(Command("list"))
async def userNote(message: Message):
    notes = await rq.get_my_notes(user_id = message.from_user.id)

    if not notes:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –∑–∞–º–µ—Ç–æ–∫")
        return

    text = "üìÑ    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:\n\n\n"
    for note in notes:
        name = note.name
        noteText = note.text
        noteid = note.id
        text += f"<b>‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: </b> {name} \n<b>Id –≤–∞—à–µ–π –∑–∞–º—Ç–µ–∫–∏:</b> {noteid} \n<b>–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: </b>\n <pre> {noteText} </pre>\n\n"

    await message.answer(text, reply_markup=kb.newNote_Clearall,parse_mode= 'HTML')
    

@router.callback_query(F.data == "listMenu")
async def userNote(callback: CallbackQuery):
    
    notes = await rq.get_my_notes(user_id = callback.from_user.id)

    if not notes:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –∑–∞–º–µ—Ç–æ–∫...")
        return

    await callback.message.delete() 

    text = "üìÑ    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:\n\n\n"
    for note in notes:
        name = note.name
        noteText = note.text
        noteid = note.id
        text += f"<b>‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: </b> {name} \n<b>Id –≤–∞—à–µ–π –∑–∞–º—Ç–µ–∫–∏:</b> {noteid} \n<b>–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: </b>\n <pre> {noteText} </pre>\n\n"

    await callback.message.answer(text,reply_markup=kb.newNote_Clearall,parse_mode= 'HTML')

    
@router.message(Command("giveapanel"))
async def giveapanel(message:Message):
    
    if message.from_user.id != "ADMIN ID":
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /apanel <user_id> <–î–∞–Ω–Ω—ã–µ>")
        return

    user_id = args[1]
    text = args[2]
    adminTag = 0
    
    if text.lower() in ['+', '–≤—ã–¥–∞—Ç—å', '–¥–∞', '–¥–∞—Ç—å','–∞–¥–º–∏–Ω','—Å–æ–≥–ª–∞—Å–µ–Ω', '–æ–¥–æ–±—Ä–∏—Ç—å']:
        adminTag = 1
    
        extraditon = await rq.giveapanel(
            tg_id = user_id, 
            adminTag=adminTag
            )

        if extraditon: 
             await message.reply("–ü—Ä–∞–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
@router.message(Command("send"))
async def send(message: Message):
    user_id = message.from_user.id
    chekrules = await rq.chekAdmin(tg_id = user_id)
    
    if chekrules:
        args1 = message.text.split(maxsplit=2)
        
        if len(args1)<3:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /send <user_id> <–¢–µ–∫—Å—Ç>")
            return
        
        user_id1 = args1[1]
        text1 = args1[2]
        
        try: 
            await message.bot.send_message(chat_id=user_id1, text= f'üì® –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞: \n\n <i>{text1}</i>', parse_mode='HTML')
        except:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...')    
        
    else:
        await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—É—Ç–ø–Ω–∞')
        
        
@router.message(Command("clear"))
async def clear(message: Message):
    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏?", reply_markup= kb.delete_menu)
    
    
@router.callback_query(F.data == "deleteAll")
async def clearYes(callback: CallbackQuery):
    
    await callback.message.delete() 
    
    clear = await rq.clearAll(
        id = callback.from_user.id
    )
    
    if clear:
        await callback.message.answer("–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    else: 
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏...")
        
@router.message(Command("delete"))
async def delete(message: Message):
    delmess = message.text.split(maxsplit=2)
    
    if len(delmess) < 2:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /delete <id –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏>", reply_markup=kb.list_menu)
        return

    note_id = delmess[1]
    userid = message.from_user.id
    
    dele = await rq.delete(
        userId = userid,
        noteId = note_id
    )
    
    if dele:
        await message.reply("–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ —É–¥–∞–ª–µ–Ω–∞.\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /list", reply_markup=kb.list_menu)
    else:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É —Å id {note_id} \n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã –ø–æ—Å–º—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏", reply_markup=kb.list_menu)
        
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìù *–ë–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫*\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n"
        "/newnote ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: /newnote –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏.\n\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: /delete <Id –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏> | (–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–¥–æ –∑–Ω–∞—Ç—å id –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏)\n\n"
        "/edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏. "
        "| –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è (–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–¥–æ –∑–Ω–∞—Ç—å id –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏)\n\n"
        "/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å—Ä–∞–∑—É (–±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).\n\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown"
    )   
    
    
    
@router.message(Command("clearall"))
async def clearall(message: Message):
    user_id = message.from_user.id
    chekadmin = await rq.chekAdmin(tg_id = user_id)
    
    if chekadmin:
        purge = await rq.clearall()
        if purge:
            await message.answer("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏.")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞...")